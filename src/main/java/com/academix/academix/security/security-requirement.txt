 TODO:
 1. Implement PreAuthorize, RBAC


Entity - User, VerificationToken(one to one with user unidirectional rel)
AuthService - register(UserRegistrationDTO, HttpServletRequest request)
               check if email exist -> hashed password -> save db,
               String randomCode = RandomString.make(64); or String token = UUID.randomUUID().toString();
               create VerificationToken linked to user -> save db,
               String url = request.getRquestUrl.toString().replace(request.getRequestURI(), "");
               EmailService.sendVerificationEmail(url, token)
       )
  Email Service - sendVerificationEmail(url, token
                    create MimeMessage/SimpleMailMessage
                    link = url + /api/v1/verify?token=...
                    JavaMailSender.send(...)
               )
   Once user clicked -> GET url + /verify?token=...
  AuthController -> verify(@RequestParam token, HttpServletRequest request
                           invoke authService.verify()
                            )
  AuthService - verify(token
                   VerificationTokenRepository.findToken if exist -> throw exception if not
                   check if expired, return token expired
                   (can resend through AuthController, (authentication, request
                   (find user then resendVerificationToken(authentication, request),delete token then return "token expired, check your email for new token")
 
                   User user = verificationToken.getUser(); or User user = userRepo.findByVerificationToken
                   user.setVerify(true) -> save db
                   VerificationTokenRepository.deleteByToken(token)
                   )
  AuthService - resendVerificationToken(authentication, String baseUrl
                    authentication.getName() or getPrincipal or fetch to the database using getName() (email)
                    Create Token, linked to user, save db
                    url = request.getRequestUrl.toString().replace(request.getRequestURI(), "")
                    emailService.sendVerificationEmail(url, token);
                   ) - done
  make email service async (done), and scheduled token cleanup for expired tokens (done)
  Send rate-limited resend email feedback like: "Token already sent. Please check your inbox or wait X minutes."
  implement AOP to check if a user verify to all the request,
                       get authentication.
                       User user = repo.findUser(authentication.getName())
                       check if verified
                       if so, invoke the method, else throw exceptions Forbidden
  Maybe create a token service, generateVerificationToken, CheckExpiration, ResetPassword, 2FA


  Sample AOP, uses Annotation
/*
@Around("@annotation(RequireVerified)")
public Object checkVerified(ProceedingJoinPoint joinPoint) throws Throwable {
    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
    String email = auth.getName();   or getUsername
    User user = userRepo.findByEmail(email).orElseThrow();
    if (!user.isVerified()) {
        throw new ForbiddenException("Email not verified");
    }
    return joinPoint.proceed();
}
 Custom Annotation
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface RequireVerified {}

 Controller
@RequireVerified
@GetMapping("/secure-resource")
public ResponseEntity<?> getSecureInfo() { ... }

 */