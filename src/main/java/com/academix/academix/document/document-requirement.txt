TODO:
1. Implement web-socket for real time notification of remarks and live shown of remarks
2. Add file handling for authorization letter, or more verification process(sending id, pic, bio-data)
3. Implement messaging/event per document request. So admin/registrar can see it
8. Implement AOP logging or SLF4J or emailing
9. Make things transactional
19. Transanction propagation = new for logs even if the operation is rollback?
13. Implement PrePersist or EnableJpaAuditing
16. Make request STATUS to EXPIRED after x days if status does not change to REQUESTED
17. Update to status should only be change if the condition is true such as, REQUESTED to IN_PROGRESS and not IN_PROGRESS to REQUESTED (this should be change in forceAdminUpdate)
21. Maybe make the logging(persistence to DB) as AOP
22. use validateAction in request service impl, validateAction(documentRequest, ActionPermission.APPROVE);
23. implement clean up every 2 years, archive request
24. put the mapper to facade not in service
26. Implement filtering specially for request status
// For admin update - approve, reject, complete, revert
// After doing those particular actions, it should logged as a remark/or literal log

public void restoreRequest(Long id) {
    DocumentRequest request = repository.findById(id)
            .orElseThrow(() -> new RuntimeException("Request not found"));

    request.setArchived(false);
    repository.save(request);
}


Sample:
DocumentRemark remark = new DocumentRemark();
remark.setMessage(requestDTO.getRemarkMessage());
remark.setRole(jwtUtil.getRole()); // or from context
remark.setCreatedBy(currentUser);
remark.setCreatedAt(LocalDateTime.now());

documentRequest.getRemarks().add(remark);

public enum Role {
    STUDENT,
    TEACHER,
    REGISTRAR,
    PRINCIPAL,
    ADMIN
}

POST	/api/requests/{id}/upload	Upload ID/authorization letter