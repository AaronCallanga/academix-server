TODO:
1. Implement web-socket for real time notification of remarks and live shown of remarks
2. Add file handling for authorization letter, or more verification process(sending id, pic, bio-data)
3. Implement messaging/event per document request. So admin/registrar can see it
4. Add a type field to DocumentRemark (USER, SYSTEM, LOG, etc.) and roles too (user, documetn remark)
7. Implement Pagination for lists (for remark/user)
8. Implement AOP logging or SLF4J
9. Make things transactional
11. Implement logging in (console and database) updating request, see notes in update method DocumentRequestServiceImpl - updateDocumentRequest - even cancel request
12. Refactor code base/ clean up - use userService.getUserFromAuth, in remark/request too
13. Implement PrePersist or EnableJpaAuditing
15. Add remark logging/audit per STATUS changed in document request. Custom remark(reason) for CANCELLED/REJECTED. Just create an object of remark/log, Authentication for author
16. Make request STATUS to EXPIRED after x days if status does not change to REQUESTED
17. Update to status should only be change if the condition is true such as, REQUESTED to IN_PROGRESS and not IN_PROGRESS to REQUESTED (this should be change in forceAdminUpdate)
19. Transanction propagation = new for logs even if the operation is rollback?
// For admin update - approve, reject, complete, revert
// After doing those particular actions, it should logged as a remark/or literal log

Sample:
DocumentRemark remark = new DocumentRemark();
remark.setMessage(requestDTO.getRemarkMessage());
remark.setRole(jwtUtil.getRole()); // or from context
remark.setCreatedBy(currentUser);
remark.setCreatedAt(LocalDateTime.now());

documentRequest.getRemarks().add(remark);

public enum Role {
    STUDENT,
    TEACHER,
    REGISTRAR,
    PRINCIPAL,
    ADMIN
}