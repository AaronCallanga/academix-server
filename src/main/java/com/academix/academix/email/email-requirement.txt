- Create a base interface Email Service
        void sendEmail
- Create an implementation of EmailService: abstract BaseEmailServiceImpl (acts as a base impl class - abstract allows to share logic)
        @Override sendEmail
- Create domain specific interface that extends EmailService
        AuthEmailService            void sendVerificationToken      (done)
        DocumentEmailService        void sendDocumentRequestReminder
- Create the implementation of AuthEmailService and DocumentEmailService:
        AuthEmailServiceImpl extends BaseEmailServiceImpl
        DocumentEmailServiceImpl extends BaseEmailServiceImpl
        -- we extends BaseEmailServiceImpl to use the shared logic sendEmail

Other domains:
- Notification
- Logging
- Scheduling

// do cleanup refactoring
POST	/api/notifications/send-email	Send email manually
POST	/api/notifications/send-sms	Send SMS manually
GET	/api/notifications/logs	View sent logs


Send email when:
    - request expired
    - DocumentScheduledTask = send email 3 days, and 1 day before the confirmed pick up date (status is READY_FOR_PICKUP and
        pick up date is 3 days before or 1 day before) send also after updating status to READYFORPICKUP        -  test

Scheduled Job
    - setting request status to EXPIRED after 30 days if status is still pending/requested  - test
    - clean up of expried request (after 1 year?) and rejected request(delete)  - test
    - clean up of completed request (per 2 year?) (status is RELEASED)


